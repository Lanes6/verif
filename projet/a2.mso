//Algo 2
machine=[PASSIF,ACTIF]{
	  etat=2;
	  init=1;
	  0=PASSIF;
	  1=ACTIF;
	  1->1 [StayActif,FinalActif];
	  0->1 [GoActif,FinalActif];
	  0->0 [StayPassif,FinalPassif];
	  1->0 [GoPassif,FinalPassif];
};;

token=[M0,M1,M2,Term]{
	etat=4;
	init=2;
	0=M0;
	1=M1;
	2=M2;
	3=Term;
	2->2 [Stay,StayM2];
	1->1 [Stay,StayM1];
	0->0 [Stay,StayM0];
	2->1 [GoM1];
	1->0 [GoM0];
	0->3 [GoTerm];
};;

systeme=<machine M0, machine M1, machine M2, token Tk>{
	//Une machine peut passer spontanément de active à passive (sauf quand le jeton est sur MTerm)
		<_,_,GoPassif,Stay>; //M2 Actif->Passif
		<_,GoPassif,_,Stay>; //M1 Actif->Passif
		<GoPassif,_,_,Stay>; //M0 Actif->Passif

	//Jeton passé de Mi+1 à Mi si Mi+1 est passive 
		<_,_,StayPassif,GoM1>; //Le jeton est sur M2 ET M2 est passif -> Le jeton est donné à M1
		<_,StayPassif,_,GoM0>; //Le jeton est sur M1 ET M1 est passif -> Le jeton est donné à M0
		<StayPassif,_,_,GoTerm>; //Le jeton est sur M0 ET M0 est passif -> Le jeton est donné à MTerm

	//M2 peut envoyer des messages si elle est active (sauf quand le jeton est sur MTerm)
		<_,GoActif,StayActif,Stay>; //Msg de M2 to M1
		<GoActif,_,StayActif,Stay>; //Msg de M2 to M0

	//M1 peut envoyer des messages si elle est active (sauf quand le jeton est sur MTerm)
		<_,StayActif,GoActif,Stay>; //Msg de M1 to M2
		<GoActif,StayActif,_,Stay>; //Msg de M1 to M0

	//M0 peut envoyer des messages si elle est active (sauf quand le jeton est sur MTerm)
		<StayActif,GoActif,_,Stay>; //Msg de M0 to M1
		<StayActif,_,GoActif,Stay>; //Msg de M0 to M2
	};;

todot systeme_algo2.dot systeme;;

/*CTL SURETE*/
/*systeme += surete <- AG(Tk.Term->M0.PASSIF && M1.PASSIF && M2.PASSIF);;
todot systeme_algo2_CTL_surete.dot systeme;;
systeme=systeme|!surete;;
todot systeme_algo2_CTL_nonSurete.dot systeme;;*/

/*CTL EQUITE FORTE*/
/*systeme += equiteForte <- AG(M0.PASSIF && M1.PASSIF && M2.PASSIF -> AF(Tk.Term));;
todot systeme_algo2_CTL_equiteForte.dot systeme;;
systeme=systeme|!equiteForte;;
todot systeme_algo2_CTL_nonEquiteForte.dot systeme;;*/

/*CTL EQUITE FAIBLE*/
/*systeme += equiteFaible <- AG(M0.PASSIF && M1.PASSIF && M2.PASSIF -> EF(Tk.Term));;
todot systeme_algo2_CTL_equiteFaible.dot systeme;;
systeme=systeme|!equiteFaible;;
todot systeme_algo2_CTL_nonEquiteFaible.dot systeme;;*/

/*LTL SURETE*/
//Automate obtenu grace à epita avec !G(Tk.Term->M0.PASSIF&&M1.PASSIF&&M2.PASSIF)
/*LTLSurete= {
     etat=2;
     acc=1;
     init=1;
     0- true -> 0 [0];
     1- ((!M1.PASSIF && Tk.Term) || (!M2.PASSIF && Tk.Term) || (!M0.PASSIF && Tk.Term)) ->0;
     1- ((M1.PASSIF && M2.PASSIF && M0.PASSIF) || !Tk.Term) ->1;
};;
auto = automaton systeme;;
inter = LTLSurete && auto;;
inter = reduce inter;;
todot systeme_algo2_LTL_surete.dot inter;;*/


/*LTL EQUITE*/
//Automate obtenu grace à epita avec !G((M0.PASSIF&&M1.PASSIF&&M2.PASSIF)->F(Tk.Term))
/*LTLEquite= {
     etat=2;
     acc=1;
     init=0;
     0- true -> 0;
     0- (!Tk.Term && M1.PASSIF && M2.PASSIF && M0.PASSIF) ->1;
     1- (!Tk.Term) ->1 [0];
};;

auto = automaton systeme;;
inter = LTLEquite && auto;;
inter = reduce inter;;
todot systeme_algo2_LTL_equite.dot inter;;
*/
